# Таблица умножения
# Домашнее задание
# ● Условие
# На вход подается число n.
# ● Задача
# Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n.
# Обоснуйте выбор парадигм.
# ● Пример вывода:
# 1 * 1 = 1
# 1 * 2 = 2
# 1 * 3 = 3
# 1 * 4 = 4
# 1 * 5 = 5
# 1 * 6 = 6
# ..
# 1 * 9 = 9

# 1) Императивный стиль(по шагам взаимодействие с элементами), структурное программирование(применяется цикл)
# num = int(input("Введите число:   "))
# for i in range(1, num):
#     for j in range(1, num):
#         # print("%4d" % (i * j), end="")
#         print( (str(i)+'*'+str(j)+'='+str(i*j)),end="  ")
#     print()

# 2) Императивный стиль(по шагам взаимодействие с элементами), процедурное(применяется процедура ) и структурное программирование(применяется цикл)
# Процедура (англ. procedure) – последовательность команд, выделенная в
# отдельный блок кода, который можно вызывать по его имени, то есть имени
# процедуры.

def procedura(num):
     for i in range(1, num+1):
        for j in range(1, num+1):
            # print("%4d" % (i * j), end="")
            print( (str(i)+'*'+str(j)+'='+str(i*j)),end="  ",)
        print()
numUser = int(input("Введите число:   "))
procedura(numUser)

# Удобен пример под номером 2.
# Функция - это удобно, потому что
# входные данные могут быть разными, и конкретно этот кусок кода с
# большой вероятностью будет переиспользован несколько раз, возможно в разных
# контекстах. И удобнее вызывать его по имени вместо того, чтобы копировать в
# разных частях финальной программы.
